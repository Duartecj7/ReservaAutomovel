{
	"info": {
		"_postman_id": "9134552f-ed42-4152-bf48-e085be763fce",
		"name": "Sistema de Reserva de Automoveis",
		"description": "# üöÄ Testar as requisi√ß√µes\n\nA cole√ß√£o cont√©m opera√ß√µes CRUD b√°sicas para os recursos \"Carro\", \"Cliente\" e \"Reserva\".\n\n---\n\n# Carro:\n\n1. Adicionar um carro (POST)\n    \n    1. clique em Adicionar um carro\n        \n    2. clique em SEND\n        \n    3. Retorna a lista de carros com o novo carro\n        \n2. Listar todos os carros(GET)\n    \n    1. clique em Listar todos os carros\n        \n    2. clique em SEND\n        \n    3. Retorna a lista de carros\n        \n\n---\n\n# Cliente:\n\n1. Adicionar um cliente(POST)\n    \n    1. clique em Adicionar Cliente\n        \n    2. clique em SEND\n        \n    3. Retorna a lista de carros com o novo carro\n        \n2. Listar todos os carros(GET)\n    \n    1. clique em Listar todos os carros\n        \n    2. clique em SEND\n        \n    3. Retorna a lista de clientes\n        \n\n---\n\n# Reserva:\n\n**nota**: Precisamos de um ID de carro e cliente v√°lidos, para isso temos de mudar no ficheiro JSON (presente na aba BODY) os respetivos ID de cliente e carro\n\n1. Adicionar uma Reserva(POST)\n    \n    1. clique em Adicionar reserva\n        \n    2. mude caso necess√°rio o ID de carro e cliente(ver **nota acima descrita**)\n        \n    3. clique em SEND\n        \n    4. Retorna a lista de reservas com a nova reserva\n        \n2. Listar todos as reservas(GET)\n    \n    1. clique em Listar todas as reservas\n        \n    2. clique em SEND\n        \n    3. Retorna a lista de reservas\n        \n3. Listar reserva por ID (GET) - tal como para adicionar uma reserva precisamos do id de carro e cliente, aqui precisamos do id de uma reserva criada, podemos v√™-lo ao listar as reservas\n    \n    1. clique em Listar Reserva por ID\n        \n    2. no local do link cole o id da reserva √° frente de:\n        \n        1. [http://localhost:8080/reservas/COLOQUEidAQUI](http://localhost:8080/reservas/COLOQUE)\n            \n        2. EX: http://localhost:8080/reservas/d9241704-7c71-4fad-8337-296969d47789\n            \n    3. clique em SEND\n        \n    4. Retorna a lista de reservas\n        \n\n---",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "40052940"
	},
	"item": [
		{
			"name": "Carro",
			"item": [
				{
					"name": "Listar todos os carros",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/info?id=1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"info"
							],
							"query": [
								{
									"key": "id",
									"value": "1"
								}
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "Adicionar um carro",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"Add your name in the body\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/info",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"info"
							]
						},
						"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
					},
					"response": []
				}
			]
		},
		{
			"name": "Cliente",
			"item": [
				{
					"name": "Listar todos Clientes",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful PUT request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 204]);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"name\": \"Add your name in the body\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/info?id=1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"info"
							],
							"query": [
								{
									"key": "id",
									"value": "1"
								}
							]
						},
						"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
					},
					"response": []
				},
				{
					"name": "Adicionar Cliente",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful DELETE request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 202, 204]);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/info?id=1",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"info"
							],
							"query": [
								{
									"key": "id",
									"value": "1"
								}
							]
						},
						"description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
					},
					"response": []
				}
			]
		},
		{
			"name": "Reserva",
			"item": [
				{
					"name": "Listar todas as reservas",
					"request": {
						"method": "GET",
						"header": []
					},
					"response": []
				},
				{
					"name": "Adicionar reserva",
					"request": {
						"method": "GET",
						"header": []
					},
					"response": []
				},
				{
					"name": "Listar Reserva por ID",
					"request": {
						"method": "GET",
						"header": []
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "id",
			"value": "1"
		},
		{
			"key": "base_url",
			"value": "https://postman-rest-api-learner.glitch.me/"
		}
	]
}